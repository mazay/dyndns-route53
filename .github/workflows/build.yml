name: Build

env:
  GO_VERSION: "1.23"
  ATTACHMENTS: ""
  GOPATH: ${{ github.workspace }}

on:
  release:
    types:
      - published
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Chechout
        uses: actions/checkout@v5
        with:
          path: ./src/github.com/${{ github.repository }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: "**/go.sum"

      - name: Install dependencies
        run: |
          cd ./src/github.com/${{ github.repository }}
          go mod download

      - name: Run tests
        run: |
          cd ./src/github.com/${{ github.repository }}
          GOFLAGS="-json" go test -timeout 5m ./... -coverprofile cover.out

  build:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        go-os: [darwin, windows, linux, freebsd]
        go-arch: [amd64, 386, arm, arm64]
        exclude:
          # excludes 32 bit architectures for darwin builds
          - go-os: darwin
            go-arch: 386
          - go-os: darwin
            go-arch: arm
    steps:
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Chechout
        uses: actions/checkout@v5
        with:
          path: ./src/github.com/${{ github.repository }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: "**/go.sum"

      - name: Install dependencies
        run: |
          cd ./src/github.com/${{ github.repository }}
          go mod download

      - name: Build
        env:
          RELEASE_VERSION: ${{ steps.meta.outputs.version }}
          OS: ${{ matrix.go-os }}
          GOOS: ${{ matrix.go-os }}
          ARCH: ${{ matrix.go-arch }}
          GOARCH: ${{ matrix.go-arch }}
        run: |
          cd ./src/github.com/${{ github.repository }}
          go build -o ./bin/dyndns-route53-${{ steps.meta.outputs.version }}-${{ matrix.go-os }}-${{ matrix.go-arch }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dyndns-route53-${{ steps.meta.outputs.version }}-${{ matrix.go-os }}-${{ matrix.go-arch }}
          path: ./src/github.com/${{ github.repository }}/bin/dyndns-route53-*

  docker:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ghcr.io/${{ github.repository }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Chechout
        uses: actions/checkout@v5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: "ghcr.io"
          username: "gha-user"
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          platforms: linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64/v8,linux/386,linux/ppc64le
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args:
            RELEASE_VERSION=${{ steps.meta.outputs.version }}

  publish:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'release' }}
    needs: build
    steps:
      - name: Chechout
        uses: actions/checkout@v5

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: artifacts/
          pattern: dyndns-route53-*

      - name: Upload assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for artifact in $(ls artifacts/*); do ATTACHMENTS="${ATTACHMENTS} ${artifact}"; done;
          gh release upload ${{ github.ref_name }} ${ATTACHMENTS}

  helm-release:
    name: helm-release
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - uses: actions/checkout@v5

      - name: Install Helm
        uses: azure/setup-helm@v4.3.0

      - name: Package Helm Chart
        run: |
          cd deploy
          helm package helm \
            --version ${{ github.event_name == 'release' && github.event.release.tag_name || '0.0.0' }} \
            --app-version ${{ github.event_name == 'release' && github.event.release.tag_name || '0.0.0' }}

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Helm Chart
        run: |
          for pkg in deploy/*.tgz; do
            if [ -z "${pkg:-}" ]; then
              break
            fi
            helm push ${pkg} oci://ghcr.io/${{ github.repository_owner }}/helm
          done
